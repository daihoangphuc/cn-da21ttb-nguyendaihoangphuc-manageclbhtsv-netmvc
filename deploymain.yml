name: CI/CD Pipeline - Production

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DOCKER_IMAGE: phuchoang1910/webapp_htsv
  CONTAINER_NAME: webapp_htsv
  HOST_PORT: 7516
  HEALTH_CHECK_URL: http://localhost:7516/health

jobs:
  # ==============================================
  # Stage 1: Code Quality & Testing
  # ==============================================
  code-quality:
    name: Code Quality & Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.0.x'

      - name: Cache .NET packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: |
          cd src
          dotnet restore

      - name: Build application
        run: |
          cd src
          dotnet build --no-restore --configuration Release

      # Uncomment when you add unit tests
      # - name: Run unit tests
      #   run: |
      #     cd src
      #     dotnet test --no-build --configuration Release --collect:"XPlat Code Coverage" --results-directory ./coverage

      # - name: Upload test results
      #   uses: actions/upload-artifact@v3
      #   if: always()
      #   with:
      #     name: test-results
      #     path: src/coverage

  # ==============================================
  # Stage 2: Security Scanning
  # ==============================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './src'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ==============================================
  # Stage 3: Build & Push Docker Image
  # ==============================================
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan]
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./src
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            DB_PASSWORD2=${{ secrets.DB_PASSWORD2 }}
            SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}
            MICROSOFT_CLIENT_ID=${{ secrets.MICROSOFT_CLIENT_ID }}
            MICROSOFT_CLIENT_SECRET=${{ secrets.MICROSOFT_CLIENT_SECRET }}

      - name: Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_IMAGE }}:latest
          format: 'sarif'
          output: 'trivy-image-results.sarif'

  # ==============================================
  # Stage 4: Deploy to Production
  # ==============================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: 
      name: production
      url: http://${{ secrets.VPS_HOST }}:7516
    
    steps:
      - name: Deploy to Production Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.VPS_SSH_PORT }}
          script: |
            # Colors for output
            RED='\033[0;31m'
            GREEN='\033[0;32m'
            YELLOW='\033[1;33m'
            NC='\033[0m' # No Color
            
            echo -e "${YELLOW}Starting deployment process...${NC}"
            
            # Pull latest image
            echo -e "${YELLOW}Pulling latest Docker image...${NC}"
            docker pull ${{ env.DOCKER_IMAGE }}:latest
            
            # Health check function
            health_check() {
              local max_attempts=30
              local attempt=1
              
              echo -e "${YELLOW}Performing health check...${NC}"
              while [ $attempt -le $max_attempts ]; do
                if curl -f -s ${{ env.HEALTH_CHECK_URL }} > /dev/null 2>&1; then
                  echo -e "${GREEN}Health check passed!${NC}"
                  return 0
                fi
                echo "Health check attempt $attempt/$max_attempts failed, waiting 10s..."
                sleep 10
                ((attempt++))
              done
              
              echo -e "${RED}Health check failed after $max_attempts attempts${NC}"
              return 1
            }
            
            # Backup current container (if exists)
            if docker ps -q -f name=${{ env.CONTAINER_NAME }} | grep -q .; then
              echo -e "${YELLOW}Creating backup of current container...${NC}"
              docker commit ${{ env.CONTAINER_NAME }} ${{ env.DOCKER_IMAGE }}:backup-$(date +%Y%m%d_%H%M%S)
            fi
            
            # Deploy new version
            echo -e "${YELLOW}Deploying new version...${NC}"
            
            # Stop and remove old container
            docker stop ${{ env.CONTAINER_NAME }} 2>/dev/null || true
            docker rm ${{ env.CONTAINER_NAME }} 2>/dev/null || true
            
            # Start new container (HTTP only - HTTPS via Cloudflare Tunnel)
            docker run -d --name ${{ env.CONTAINER_NAME }} \
              -p ${{ env.HOST_PORT }}:80 \
              --restart unless-stopped \
              --health-cmd "curl -f http://localhost:80/health || exit 1" \
              --health-interval=30s \
              --health-timeout=10s \
              --health-start-period=40s \
              --health-retries=3 \
              ${{ env.DOCKER_IMAGE }}:latest
            
            # Wait for container to start
            echo -e "${YELLOW}Waiting for container to start...${NC}"
            sleep 15
            
            # Check if container is running
            if ! docker ps -q -f name=${{ env.CONTAINER_NAME }} | grep -q .; then
              echo -e "${RED}Container failed to start!${NC}"
              exit 1
            fi
            
            # Perform health check
            if health_check; then
              echo -e "${GREEN}Deployment successful!${NC}"
              
              # Cleanup old images (keep last 3)
              echo -e "${YELLOW}Cleaning up old Docker images...${NC}"
              docker images ${{ env.DOCKER_IMAGE }} --format "table {{.Repository}}\t{{.Tag}}\t{{.ID}}" | grep -v latest | grep -v backup | tail -n +4 | awk '{print $3}' | xargs -r docker rmi || true
              
              echo -e "${GREEN}Deployment completed successfully!${NC}"
              echo -e "${GREEN}Application is available at: http://${{ secrets.VPS_HOST }}:${{ env.HOST_PORT }}${NC}"
            else
              echo -e "${RED}Deployment failed - rolling back...${NC}"
              
              # Stop failed container
              docker stop ${{ env.CONTAINER_NAME }} 2>/dev/null || true
              docker rm ${{ env.CONTAINER_NAME }} 2>/dev/null || true
              
              # Find most recent backup
              BACKUP_IMAGE=$(docker images ${{ env.DOCKER_IMAGE }} --format "{{.Repository}}:{{.Tag}}" | grep backup | head -1)
              
              if [ ! -z "$BACKUP_IMAGE" ]; then
                echo -e "${YELLOW}Rolling back to: $BACKUP_IMAGE${NC}"
                docker run -d --name ${{ env.CONTAINER_NAME }} \
                  -p ${{ env.HOST_PORT }}:80 \
                  --restart unless-stopped \
                  $BACKUP_IMAGE
                
                sleep 10
                if health_check; then
                  echo -e "${GREEN}Rollback successful!${NC}"
                else
                  echo -e "${RED}Rollback failed!${NC}"
                  exit 1
                fi
              else
                echo -e "${RED}No backup available for rollback!${NC}"
                exit 1
              fi
            fi

  # ==============================================
  # Stage 5: Post-deployment verification
  # ==============================================
  verify-deployment:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Verify application health
        run: |
          echo "Waiting for application to stabilize..."
          sleep 30
          
          # Test health endpoint
          curl -f http://${{ secrets.VPS_HOST }}:7516/health || exit 1
          echo "Health check passed!"
          
          # Test main page
          curl -f -s http://${{ secrets.VPS_HOST }}:7516/ > /dev/null || exit 1
          echo "Main page accessible!"
          
          echo "Deployment verification completed successfully!"

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment verification successful!"
            echo "🌐 Application URL: http://${{ secrets.VPS_HOST }}:7516"
          else
            echo "❌ Deployment verification failed!"
            exit 1
          fi 